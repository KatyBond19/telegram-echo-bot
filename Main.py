import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ContentType
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import load_dotenv
import os
load_dotenv()
BOT_TOKEN = os.getenv("7561017077:AAF0_aBLpMCQuX0wjDVgYNKH4-COxspmwQE")

# –í–º–µ—Å—Ç–æ BOT TOKEN HERE –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —É @BotFather
BOT_TOKEN = '7561017077:AAF0_aBLpMCQuX0wjDVgYNKH4-COxspmwQE'

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
@dp.message(Command(commands=["start"]))
async def process_start_command(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç!\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –≠—Ö–æ-–±–æ—Ç!\n–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å')


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help"
@dp.message(Command(commands=['help']))
async def process_help_command(message: Message):
    await message.answer(
        '–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏ –≤ –æ—Ç–≤–µ—Ç '
        '—è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–∞—à–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è,
# –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ "/start" –∏ "/help"
@dp.message()
async def send_echo(message: Message):
    await message.reply(text=message.text)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –±–æ—Ç—É —Ñ–æ—Ç–æ
async def send_photo_echo(message: Message):
    print(message)
    await message.reply_photo(message.photo[0].file_id)
    dp.message.register(send_photo_echo, F.content_type == ContentType.PHOTO)


# –ö–æ–º–∞–Ω–¥–∞ /caps
@dp.message(Command("caps"))
async def cmd_caps(message: types.Message, command: types.Command):
    if not command.args:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /caps –ø—Ä–∏–≤–µ—Ç")
        return
    await message.reply(command.args.upper())

# –ö–æ–º–∞–Ω–¥–∞ /reverse
@dp.message(Command("reverse"))
async def cmd_reverse(message: types.Message, command: types.Command):
    if not command.args:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /reverse –ø—Ä–∏–≤–µ—Ç")
        return
    await message.reply(command.args[::-1])

# –§–∏–ª—å—Ç—Ä –¥–ª—è –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
BAD_WORDS = {'–ø–ª–æ—Ö–æ–µ', '—Å–ª–æ–≤–æ', '–º–∞—Ç'}

@dp.message(F.text.lower().contains(BAD_WORDS))
async def bad_words_filter(message: types.Message):
    await message.reply("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞!", reply=False)
    await message.delete()

# –§–∏–ª—å—Ç—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ü–∏—Ñ—Ä–∞–º–∏
@dp.message(F.text.regexp(r'\d').as_("has_digits"))
async def digits_filter(message: types.Message, has_digits: re.Match):
    await message.reply(f"üî¢ –í –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω—ã —Ü–∏—Ñ—Ä—ã: {has_digits.group()}")


# –§–∏–ª—å—Ç—Ä –¥–ª—è –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
BAD_WORDS = {'–ø–ª–æ—Ö–æ–µ', '—Å–ª–æ–≤–æ', '–º–∞—Ç'}

@dp.message(F.text.lower().contains(BAD_WORDS))
async def bad_words_filter(message: types.Message):
    await message.reply("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞!", reply=False)
    await message.delete()

# –§–∏–ª—å—Ç—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ü–∏—Ñ—Ä–∞–º–∏
@dp.message(F.text.regexp(r'\d').as_("has_digits"))
async def digits_filter(message: types.Message, has_digits: re.Match):
    await message.reply(f"üî¢ –í –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω—ã —Ü–∏—Ñ—Ä—ã: {has_digits.group()}")

if __name__ == '__main__':
    dp.run_polling(bot)