import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ContentType
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import load_dotenv
import os

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN") or '7561017077:AAF0_aBLpMCQuX0wjDVgYNKH4-COxspmwQE'

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ (–≤—ã–Ω–µ—Å–µ–Ω –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É)
BAD_WORDS = {'–ø–ª–æ—Ö–æ–µ', '—Å–ª–æ–≤–æ', '–º–∞—Ç'}

# –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def process_start_command(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç!\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –≠—Ö–æ-–±–æ—Ç!\n–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å')

@dp.message(Command("help"))
async def process_help_command(message: Message):
    await message.answer('–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏ –≤ –æ—Ç–≤–µ—Ç —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
@dp.message(F.content_type == ContentType.PHOTO)
async def send_photo_echo(message: Message):
    await message.reply_photo(message.photo[-1].file_id)

# –ö–æ–º–∞–Ω–¥–∞ /caps (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
@dp.message(Command("caps"))
async def cmd_caps(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /caps –ø—Ä–∏–≤–µ—Ç")
        return
    await message.reply(args[1].upper())

# –ö–æ–º–∞–Ω–¥–∞ /reverse (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
@dp.message(Command("reverse"))
async def cmd_reverse(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /reverse –ø—Ä–∏–≤–µ—Ç")
        return
    await message.reply(args[1][::-1])

# –§–∏–ª—å—Ç—Ä –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
@dp.message(F.text.casefold().contains(BAD_WORDS))
async def bad_words_filter(message: types.Message):
    await message.reply("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞!")
    await message.delete()

# –§–∏–ª—å—Ç—Ä —Ü–∏—Ñ—Ä (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
@dp.message(F.text.regexp(r'\d'))
async def digits_filter(message: types.Message):
    digits = re.findall(r'\d', message.text)
    await message.reply(f"üî¢ –í –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω—ã —Ü–∏—Ñ—Ä—ã: {', '.join(digits)}")

# –≠—Ö–æ-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º!)
@dp.message()
async def send_echo(message: Message):
    await message.reply(text=message.text)

if __name__ == '__main__':
    dp.run_polling(bot)